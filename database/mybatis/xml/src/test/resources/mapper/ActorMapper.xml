<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 命名空间 可以是任何 字符串，但是 如果使用 Java 接口 需要 使用 接口的 全类名-->
<mapper namespace="com.test.ActorMapper">

    <!--    1。cache – 该命名空间的缓存配置。
            配置二级缓存，默认不启用，加入标签 即可启用
            这个配置 只会 在此 命名空间 启用
    -->

    <!--    2。cache-ref – 引用其它命名空间的缓存配置。
            如果想和 其他 命名空间 共享 缓存
    -->


    <!--    3。resultMap – 描述如何从数据库结果集中加载对象，是最复杂也是最强大的元素。

            如果 结果集 不能简单 的 对应到 领域对象 上时 使用
            resultMap 支持的属性：
                id	        当前命名空间中的一个唯一标识，用于标识一个结果映射。
                type	    类的完全限定名, 或者一个类型别名（关于内置的类型别名，可以参考上面的表格）。
                autoMapping	如果设置这个属性，MyBatis 将会为本结果映射开启或者关闭自动映射。 这个属性会覆盖全局的属性 autoMappingBehavior。默认值：未设置（unset）。

            resultMap 支持的 子元素：
                constructor - 用于在实例化类时，注入结果到构造方法中
                    idArg - ID 参数；标记出作为 ID 的结果可以帮助提高整体性能
                    arg - 将被注入到构造方法的一个普通结果
                id – 一个 ID 结果；标记出作为 ID 的结果可以帮助提高整体性能
                result – 注入到字段或 JavaBean 属性的普通结果
                association – 一个复杂类型的关联；许多结果将包装成这种类型
                    嵌套结果映射 – 关联可以是 resultMap 元素，或是对其它结果映射的引用
                collection – 一个复杂类型的集合
                    嵌套结果映射 – 集合可以是 resultMap 元素，或是对其它结果映射的引用
                discriminator – 使用结果值来决定使用哪个 resultMap
                    case – 基于某些值的结果映射
                        嵌套结果映射 – case 也是一个结果映射，因此具有相同的结构和元素；或者引用其它的结果映射

                其中 id 和 result 用于 映射 简单数据类型 (String, int, double, Date 等）的属性或字段。
                    id 会被标记为对象的表示符，用于比较对象，在 缓存 和 嵌套结果映射 时使用
                    支持属性：
                        property java对象的字段或属性，先找 属性 后找 字段，可以使用导航 "address.street.number"
                        column 列名，和 resultSet.getString(columnName) 方法的参数一样。
                        javaType Java类型，一般自动推断，如果结果是 HashMap 需要写出
                        jdbcType
                        typeHandler





    -->
    <resultMap id="actorMap" type="Actor">
        <id property="actorId" column="actor_id"/>
        <result property="firstName" column="first_name"/>
        <result property="lastName" column="last_name"/>
        <result property="lastUpdate" column="last_update"/>
    </resultMap>


    <!--   4。 sql – 可被其它语句引用的可重用语句块。
            定义可以重用的 sql ，在需要时引入
            例如：
                <sql id="userColumns"> ${alias}.id,${alias}.username,${alias}.password </sql>
            引入：
                <select id="selectUsers" resultType="map">
                  select
                    <include refid="userColumns"><property name="alias" value="t1"/></include>,
                    <include refid="userColumns"><property name="alias" value="t2"/></include>
                  from some_table t1
                    cross join some_table t2
                </select>
    -->


    <!--   5。 insert – 映射插入语句。-->
    <!--   6。 update – 映射更新语句。-->
    <!--   7。 delete – 映射删除语句。-->
    <!-- 它们三个的实现非常接近，所有属性：
        属性解释：
            id	在命名空间中唯一的标识符，可以被用来引用这条语句。
            parameterType	参数类型，会自动推断，默认值为未设置（unset）。

            flushCache	    调用时清空 本地缓存 和 耳机缓存，默认值：（对 insert、update 和 delete 语句）true。
            timeout	        超时设置。默认值为未设置（unset）（依赖数据库驱动）。
            statementType	可选 STATEMENT，PREPARED 或 CALLABLE。这会让 MyBatis 分别使用 Statement，PreparedStatement 或 CallableStatement，默认值：PREPARED。

            useGeneratedKeys	是否使用自增id（仅适用于 insert 和 update）这会令 MyBatis 使用 JDBC 的 getGeneratedKeys 方法来取出由数据库内部生成的主键（比如：像 MySQL 和 SQL Server 这样的关系型数据库管理系统的自动递增字段），默认值：false。
                他对应 jdbc 中的 executeUpdate 中的 Statement.RETURN_GENERATED_KEYS 参数，

            keyProperty	      自增 id 的 属性名 （仅适用于 insert 和 update）指定能够唯一识别对象的属性，MyBatis 会使用 Statement.getGeneratedKeys() 的返回值或 insert 语句的 selectKey(执行语句） 子元素设置它的值，默认值：未设置（unset）。如果生成列不止一个，可以用逗号分隔多个属性名称。
                在设置了 useGeneratedKeys 参数后，把 keyProperty 设置 成 传入参数 对应的 自增的 属性，框架 会自动调用  Statement.getGeneratedKeys 方法把 设置 属性值

            keyColumn	    （仅适用于 insert 和 update）设置生成键值在表中的列名，在某些数据库（像 PostgreSQL）中，当主键列不是表中的第一列的时候，是必须设置的。如果生成列不止一个，可以用逗号分隔多个属性名称。
                当生成主键 不是第一列 时 必须设置，或者多个 时，因为 Statement.getGeneratedKeys() 方法获取到的是 ResultSet ，需要从中 取值

            databaseId	    如果配置了数据库厂商标识（databaseIdProvider），MyBatis 会加载所有不带 databaseId 或匹配当前 databaseId 的语句；如果带和不带的语句都有，则不带的会被忽略。

        参数映射规则：
            原始类型或简单数据类型（比如 Integer 和 String）因为没有其它属性，会用它们的值来作为参数。
            对于 pojo 对象 会查找 同名 属性，然后将它们的值传入预处理语句的参数中。
            可以指定参数的类型
                #{property,javaType=int,jdbcType=NUMERIC}
                #{height,javaType=double,jdbcType=NUMERIC,numericScale=2}


        字符串替换：
            使用 #{} 参数语法 会创建 PreparedStatement 参数占位符，就是 JDBC 中的 ? 占位符
            使用 ${} 进行简单的字符串替换，当 使用 表名 或 列名 时 使用

    -->

    <insert id="insert" parameterType="Actor" useGeneratedKeys="true" keyProperty="actorId" keyColumn="actor_id">
        <!--        <selectKey> 这个是在插入完成后 执行 sql 语句 来 获取 插入的 Id ，
                    对于 mysql 我们可以 执行  select last_insert_id(); 这个语句 获得刚刚插入的 id
                    但是 mysql 自己提供了 直接 返回的 插入 id 的 配置， 不用再次 查询, 所以我们使用 useGeneratedKeys 就可以
        -->
        insert into actor (first_name, last_name, last_update)
        values (#{firstName}, #{lastName}, #{lastUpdate})
    </insert>

    <delete id="deleteById">
        delete
        from actor
        where actor_id = #{id}
    </delete>

    <update id="updateById" parameterType="Actor">
        update actor
        set first_name  = #{firstName},
            last_name   = #{lastName},
            last_update = #{lastUpdate}
        where actor_id = #{actorId}
    </update>


    <!--    8。select – 映射查询语句。
            这里感觉 mybatis 做的就是：自动解决 参数 和 返回结果 到 Java 类型的 映射



            select 可使用的属性
                id	在命名空间中唯一的标识符，可以被用来引用这条语句。
                parameterType	参数的类型，会自动推断，默认值为未设置（unset）。

                resultType	返回值类型。 集合 应该设置 元素类型。 resultType 和 resultMap 之间只能同时使用一个。

                resultMap	对外部 resultMap 的命名引用。结果映射是 MyBatis 最强大的特性，如果你对其理解透彻，许多复杂的映射问题都能迎刃而解。 resultType 和 resultMap 之间只能同时使用一个。

                flushCache	调用时 清空 本地缓存 和 二级缓存，默认值：false。
                useCache	将其设置为 true 后，将会导致本条语句的结果被二级缓存缓存起来，默认值：对 select 元素为 true。
                timeout	    超时 时间。默认值为未设置（unset）（依赖数据库驱动）。
                fetchSize	驱动程序每次批量返回的结果行数。 默认值为未设置（unset）（依赖驱动）。
                statementType	可选 STATEMENT，PREPARED 或 CALLABLE。这会让 MyBatis 分别使用 Statement，PreparedStatement 或 CallableStatement，默认值：PREPARED。
                resultSetType	FORWARD_ONLY，SCROLL_SENSITIVE, SCROLL_INSENSITIVE 或 DEFAULT（等价于 unset） 中的一个，默认值为 unset （依赖数据库驱动）。
                databaseId	    如果配置了数据库厂商标识（databaseIdProvider），MyBatis 会加载所有不带 databaseId 或匹配当前 databaseId 的语句；如果带和不带的语句都有，则不带的会被忽略。
                resultOrdered	这个设置仅针对嵌套结果 select 语句：如果为 true，将会假设包含了嵌套结果集或是分组，当返回一个主结果行时，就不会产生对前面结果集的引用。 这就使得在获取嵌套结果集的时候不至于内存不够用。默认值：false。
                resultSets	    这个设置仅适用于多结果集的情况。它将列出语句执行后返回的结果集并赋予每个结果集一个名称，多个名称之间以逗号分隔。


            结果映射规则：
                简单结果可以设置 resultType 为 map 或 pojo（这时 MyBatis 会自动创建 ResultMap 映射同名属性，不同名 可以在 sql 中 as 重命名），
                复杂结果集需要先定义 resultMap，然后用 resultMap 属性 引用
    -->
    <select id="selectById" resultMap="actorMap">
        select *
        from actor
        where actor_id = #{id}
    </select>

    <select id="selectByName" resultMap="actorMap">
        select *
        from actor
        where actor_id = #{name}
    </select>
</mapper>